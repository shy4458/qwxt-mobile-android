package com.sx.baseframework.util;

import android.Manifest;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.Rect;
import android.net.Uri;
import android.os.Build;
import android.provider.Settings;
import android.support.annotation.ColorInt;
import android.support.annotation.ColorRes;
import android.support.annotation.FloatRange;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.v4.app.ActivityCompat;
import android.support.v4.content.ContextCompat;
import android.util.DisplayMetrics;
import android.view.View;
import android.view.WindowManager;

import com.sx.baseframework.base.BaseApplication;

import java.io.File;

/**
 * Utility methods of about the application、package、screen.
 *
 * @author JadynZhang
 * @version 1.0.0
 */
public final class AppUtils {

    private AppUtils() {
        throw new UnsupportedOperationException("Cannot be instantiated");
    }

    /**
     * Get the PackageInfo object of information about the application.
     *
     * @param context Context
     * @return the {@link PackageInfo} object.
     * @see PackageInfo
     */
    public static @Nullable PackageInfo getPackageInfo(@NonNull Context context) {
        String packageName = context.getPackageName();
        try {
            return context.getPackageManager()
                    .getPackageInfo(packageName, 0);
        } catch (PackageManager.NameNotFoundException e) {
            return null;
        }
    }

    /**
     * Return the application version code.
     *
     * @param context Context
     * @return version code.
     * @see PackageInfo
     */
    public static int getVersionCode(@NonNull Context context) {
        PackageInfo packageInfo = getPackageInfo(context);
        if(packageInfo == null) {
            return 0;
        }
        return packageInfo.versionCode;
    }

    /**
     * Return the application version name.
     *
     * @param context Context
     * @return version name.
     * @see PackageInfo
     */
    public static String getVersionName(Context context) {
        PackageInfo packageInfo = getPackageInfo(context);
        if(packageInfo == null) {
            return "";
        }
        return packageInfo.versionName;
    }

    /**
     * Return a color integer associated with a particular resource ID.
     * If the resource holds a complex {@link android.content.res.ColorStateList}, then the default
     * color from the set is returned.
     * <p>If the color resource id not found, an {@link Resources.NotFoundException} will be thrown
     *
     * @param resources Resources
     * @param resId The color resource id, as generated by the appt tool.
     * @return A single color value in the form 0XAARRGGBB
     */
    public static @ColorInt int getColor(@NonNull Resources resources, @ColorRes int resId) {
        if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            return resources.getColor(resId, null);
        } else {
            return resources.getColor(resId);
        }
    }

    /**
     * Install the designated APK file in the phone.
     * If the APK file is not exists, not do anything.
     *
     * @param context The application context.
     * @param apk The APK file.
     */
    public static void installApk(@NonNull Context context, @NonNull File apk) {
        if(!apk.exists()) {
            return;
        }
        Intent intent = new Intent();
        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        intent.setAction(Intent.ACTION_VIEW);
        intent.setDataAndType(Uri.fromFile(apk), "application/vnd.android.package-archive");
        context.startActivity(intent);
    }

    /**
     * Converts dip to px.
     * <p>If you want to use the method, you must declare the
     * following in the AndroidManifest.xml:
     * <pre>
     *      &lt;application&gt;
     *          ...
     *          android:name="com.sx.baseframework.base.BaseApplication"&gt;
     *          ...
     *      &lt;/application&gt;
     * </pre>
     *
     * @param dpVal dip value.
     * @return px value.
     */
    public static int dip2Px(@FloatRange(from = 0) float dpVal) {
        final float scale = BaseApplication.context().getResources().getDisplayMetrics().density;
        return (int) (dpVal * scale + 0.5F);
    }

    /**
     * Converts px to dip.
     * <p>If you want to use the method, you must declare the
     * following in the AndroidManifest.xml:
     * <pre>
     *      &lt;application&gt;
     *          ...
     *          android:name="com.sx.baseframework.base.BaseApplication"&gt;
     *          ...
     *      &lt;/application&gt;
     * </pre>
     *
     * @param pxVal px value.
     * @return dip value.
     */
    public static int px2Dip(@FloatRange(from = 0) float pxVal) {
        final float scale = BaseApplication.context().getResources().getDisplayMetrics().density;
        return (int) (pxVal / scale + 0.5F);
    }

    /**
     * Determine whether have been granted a particular permission.
     *
     * @param context Context
     * @param permission Permission name to check.
     * @return If granted, return true, otherwise return false.
     * @see Manifest.permission
     */
    public static boolean checkPermission(@NonNull Context context, @NonNull String permission) {
        return ContextCompat.checkSelfPermission(context, permission)
                == PackageManager.PERMISSION_GRANTED;
    }

    /**
     * Determine whether have been granted a particular permission.
     *
     * @param permission Permission name to check.
     * @return If granted, return true, otherwise return false.
     * @see Manifest.permission
     */
    public static boolean checkPermission(@NonNull String permission) {
        return checkPermission(BaseApplication.context(), permission);
    }

    /**
     * Requests permission to be granted to this application.
     *
     * @param activity Activity
     * @param permission Permission name to request.
     * @param requestCode The {@link Activity#onRequestPermissionsResult(int, String[], int[])} first parameter.
     * @see Manifest.permission
     */
    public static void requestPermission(@NonNull Activity activity,
                                         @NonNull String permission, int requestCode) {
        ActivityCompat.requestPermissions(activity, new String[]{ permission }, requestCode);
    }

    /**
     * First determine whether have been granted a particular permission,
     * if not granted yet, requests permission to be granted to this application.
     *
     * @param activity Activity
     * @param permission Permission name to request.
     * @param requestCode The {@link Activity#onRequestPermissionsResult(int, String[], int[])} first parameter.
     * @see Manifest.permission
     */
    public static void checkAndRequestPermission(@NonNull Activity activity,
                                                 @NonNull String permission, int requestCode) {
        if(!checkPermission(activity, permission)) {
            requestPermission(activity, permission, requestCode);
        }
    }

    /**
     * Open the settings interface for the current app.
     *
     * @param context Context
     */
    public static void startAppSettings(@NonNull Context context) {
        Intent intent = new Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);
        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        intent.setData(Uri.parse("package:" + context.getPackageName()));
        context.startActivity(intent);
    }

    /**
     * Returns the phone screen width and height.
     * Unit: px.
     *
     * @param context Context
     * @return Phone screen width and height, {width, height}
     */
    public static int[] getScreenSize(@NonNull Context context) {
        WindowManager wm = (WindowManager) context.getSystemService(Context.WINDOW_SERVICE);
        DisplayMetrics dm = new DisplayMetrics();
        wm.getDefaultDisplay().getMetrics(dm);
        return new int[]{dm.widthPixels, dm.heightPixels};
    }

    /**
     * Returns the status bar height, even if you hide the status bar.
     *
     * @param context Context
     * @return Status bar height
     */
    public static int getStatusBarHeight(@NonNull Context context) {
        int statusBatHeight = 0;
        int resID = context.getResources().getIdentifier("status_bar_height",
                "dimen", "android");
        if(resID > 0) {
            statusBatHeight = context.getResources().getDimensionPixelOffset(resID);
        }
        return statusBatHeight;
    }

    /**
     * Screenshot with status bar.
     *
     * @param activity Activity
     * @return The screen shot with status bar.
     */
    public static Bitmap screenshotsWithStatusBar(@NonNull Activity activity) {
        int[] screenSize = getScreenSize(activity);
        return screenshots(activity, 0, 0, screenSize[0], screenSize[1]);
    }

    /**
     * Screenshot without status bar.
     *
     * @param activity Activity
     * @return The screen shot without status bar.
     */
    public static Bitmap screenshotsWithoutStatusBar(@NonNull Activity activity) {
        int[] screenSize = getScreenSize(activity);
        // Get status bar height
        Rect frame = new Rect();
        activity.getWindow().getDecorView().getWindowVisibleDisplayFrame(frame);
        int statusBarHeight = frame.top;

        return screenshots(activity, 0, statusBarHeight, screenSize[0], screenSize[1] - statusBarHeight);
    }

    /**
     * Intercept screen by specified parameters.
     *
     * @param activity  Activity
     * @param x The x coordinate of the first pixel in screen
     * @param y The y coordinate of the first pixel in screen
     * @param width The number of pixels in each row
     * @param height The number of rows
     * @return The screen shot
     */
    private static Bitmap screenshots(Activity activity, int x, int y, int width, int height) {
        View view = activity.getWindow().getDecorView();
        view.setDrawingCacheEnabled(true);
        view.buildDrawingCache();
        Bitmap drawingCache = view.getDrawingCache();
        Bitmap snapshot = Bitmap.createBitmap(drawingCache, x, y, width, height);
        view.destroyDrawingCache();
        return snapshot;
    }

}
